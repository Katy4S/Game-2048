{"mappings":"ACGA,MAAM,EAAO,ICHb,MACE,aAAc,CACZ,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,gBAAgB,GAClC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,OAAQ,CACN,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,gBAAgB,GAClC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,UAAU,EACjB,CAEA,SAAU,CACR,IAAI,CAAC,KAAK,EACZ,CAEA,kBAAmB,CACjB,OAAO,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,EAAG,IAAM,MAAM,CAAG,IAAI,CAAC,GACvD,CAEA,YAAa,CACX,IAAM,EAAa,IAAI,CAAC,aAAa,GAErC,GAAI,EAAW,MAAM,CAAE,CACrB,GAAM,CAAA,EAAE,CAAC,CAAA,EAAE,CAAC,CAAE,CACZ,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAE3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAC/C,CACF,CAEA,eAAgB,CACd,OAAO,IAAI,CAAC,KAAK,CACd,OAAO,CAAC,CAAC,EAAK,IAAM,EAAI,GAAG,CAAC,CAAC,EAAM,IAAO,AAAS,IAAT,EAAa,CAAE,EAAA,EAAG,EAAA,CAAE,EAAI,OAClE,MAAM,CAAC,QACZ,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,UAAU,CAAC,AAAC,GAAQ,IAAI,CAAC,QAAQ,CAAC,GAChD,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,UAAU,CAAC,AAAC,GAGf,AAFW,IAAI,CAAC,QAAQ,CAAC,EAAI,KAAK,GAAG,OAAO,IAElC,OAAO,GAE5B,CAEA,QAAS,CACP,IAAI,CAAC,cAAc,GAEnB,IAAM,EAAQ,IAAI,CAAC,QAAQ,GAI3B,OAFA,IAAI,CAAC,cAAc,GAEZ,CACT,CAEA,UAAW,CACT,IAAI,CAAC,cAAc,GAEnB,IAAM,EAAQ,IAAI,CAAC,SAAS,GAI5B,OAFA,IAAI,CAAC,cAAc,GAEZ,CACT,CAEA,WAAW,CAAS,CAAE,CACpB,IAAI,EAAQ,CAAA,EACN,EAAW,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,IAC/B,IAAM,EAAS,EAAU,GAMzB,OAJI,KAAK,SAAS,CAAC,KAAS,KAAK,SAAS,CAAC,IACzC,CAAA,EAAQ,CAAA,CADV,EAIO,CACT,GAQA,OANI,IACF,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,aAAa,IAGb,CACT,CAEA,SAAS,CAAG,CAAE,CACZ,IAAM,EAAW,EAAI,MAAM,CAAC,AAAC,GAAQ,AAAQ,IAAR,GAC/B,EAAS,EAAE,CAEjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAE,IAC/B,CAAQ,CAAC,EAAE,GAAK,CAAQ,CAAC,EAAI,EAAE,EACjC,EAAO,IAAI,CAAC,AAAc,EAAd,CAAQ,CAAC,EAAE,EACvB,IAAI,CAAC,KAAK,EAAI,AAAc,EAAd,CAAQ,CAAC,EAAE,CACzB,KAEA,EAAO,IAAI,CAAC,CAAQ,CAAC,EAAE,EAI3B,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,CAGA,gBAAiB,CACf,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAG,IACjC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAS,EAEzC,CAGA,eAAgB,CACV,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,OACxC,IAAI,CAAC,MAAM,CAAG,MACL,AAAgC,IAAhC,IAAI,CAAC,aAAa,GAAG,MAAM,EAAW,IAAI,CAAC,QAAQ,IAC5D,CAAA,IAAI,CAAC,MAAM,CAAG,MADT,CAGT,CAGA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAK,IAC3B,EAAI,IAAI,CACN,CAAC,EAAK,IACJ,AAAQ,IAAR,GACE,CAAA,EAAI,GAAK,IAAQ,CAAG,CAAC,EAAI,EAAE,EAC1B,EAAI,GAAK,IAAQ,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,AAAF,GAG9C,CACF,EDpJM,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,eACtC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,kBAe5C,SAAS,IACP,EAAa,WAAW,CAAG,EAAK,QAAQ,GAIxC,AAFc,EAAK,QAAQ,GAErB,OAAO,CAAC,CAAC,EAAK,IAAM,EAAI,OAAO,CAAC,CAAC,EAAO,IAAM,AAlBtD,CAAA,SAAoB,CAAC,CAAE,CAAC,CAAE,CAAK,EAC7B,IAAM,EAAO,EAAU,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,AAEvC,CAAA,EAAK,SAAS,CAAG,aAEb,GACF,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAA,CAAO,EACzC,EAAK,WAAW,CAAG,GAEnB,EAAK,WAAW,CAAG,EAEvB,CAAA,EAOiE,EAAG,EAAG,KAErE,EAAW,SAAS,CAAC,MAAM,CAAC,SAAU,AAAqB,QAArB,EAAK,SAAS,IACpD,EAAY,SAAS,CAAC,MAAM,CAAC,SAAU,AAAqB,SAArB,EAAK,SAAS,GACvD,CAsCA,SAAS,gBAAgB,CAAC,UAAW,AAAC,GAAM,AApC5C,CAAA,SAAoB,CAAQ,EAC1B,GAAI,AAAqB,YAArB,EAAK,SAAS,GAChB,OAGF,IAAM,EAAU,CACd,UAAW,IAAM,EAAK,QAAQ,GAC9B,WAAY,IAAM,EAAK,SAAS,GAChC,QAAS,IAAM,EAAK,MAAM,GAC1B,UAAW,IAAM,EAAK,QAAQ,EAChC,CAII,AAFa,CAAA,CAAO,CAAC,EAAS,EAAI,CAAO,CAAC,EAAS,IAGrD,GAEJ,CAAA,EAmBuD,EAAE,GAAG,GAC5D,EAAY,gBAAgB,CAAC,QAlB7B,WAEI,AAAqB,SAArB,EAAK,SAAS,IACd,AAAqB,SAArB,EAAK,SAAS,IACd,AAAqB,QAArB,EAAK,SAAS,IAEd,EAAK,KAAK,GACV,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAY,WAAW,CAAG,UAC1B,EAAY,SAAS,CAAC,GAAG,CAAC,YAE1B,EAAK,OAAO,GAGd,GACF,GAKA","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["class $a5fd07fa01589658$var$Game {\n    constructor(){\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = 'idle';\n    }\n    getState() {\n        return this.board;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = 'playing';\n        this.addNewTile();\n        this.addNewTile();\n    }\n    restart() {\n        this.start();\n    }\n    createEmptyBoard() {\n        return Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    addNewTile() {\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length) {\n            const { r: r, c: c } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    getEmptyCells() {\n        return this.board.flatMap((row, r)=>row.map((cell, c)=>cell === 0 ? {\n                    r: r,\n                    c: c\n                } : null)).filter(Boolean);\n    }\n    moveLeft() {\n        return this.shiftTiles((row)=>this.mergeRow(row));\n    }\n    moveRight() {\n        return this.shiftTiles((row)=>{\n            const mergedRow = this.mergeRow(row.slice().reverse());\n            return mergedRow.reverse();\n        });\n    }\n    moveUp() {\n        this.transposeBoard();\n        const moved = this.moveLeft();\n        this.transposeBoard();\n        return moved;\n    }\n    moveDown() {\n        this.transposeBoard();\n        const moved = this.moveRight();\n        this.transposeBoard();\n        return moved;\n    }\n    shiftTiles(transform) {\n        let moved = false;\n        const newBoard = this.board.map((row)=>{\n            const newRow = transform(row);\n            if (JSON.stringify(row) !== JSON.stringify(newRow)) moved = true;\n            return newRow;\n        });\n        if (moved) {\n            this.board = newBoard;\n            this.addNewTile();\n            this.checkGameOver();\n        }\n        return moved;\n    }\n    mergeRow(row) {\n        const filtered = row.filter((val)=>val !== 0);\n        const merged = [];\n        for(let i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n            merged.push(filtered[i] * 2);\n            this.score += filtered[i] * 2;\n            i++;\n        } else merged.push(filtered[i]);\n        while(merged.length < 4)merged.push(0);\n        return merged;\n    }\n    /* eslint-disable function-paren-newline */ transposeBoard() {\n        this.board = this.board[0].map((_, colIndex)=>this.board.map((row)=>row[colIndex]));\n    }\n    /* eslint-enable function-paren-newline */ checkGameOver() {\n        if (this.board.some((row)=>row.includes(2048))) this.status = 'win';\n        else if (this.getEmptyCells().length === 0 && !this.canMerge()) this.status = 'lose';\n    }\n    /* eslint-disable function-paren-newline */ canMerge() {\n        return this.board.some((row, r)=>row.some((val, c)=>val !== 0 && (c < 3 && val === row[c + 1] || r < 3 && val === this.board[r + 1][c])));\n    }\n}\nvar /* eslint-enable function-paren-newline */ $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n'use strict';\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.button.start');\nconst $09e991522ca7e64e$var$scoreDisplay = document.querySelector('.game-score');\nconst $09e991522ca7e64e$var$gameField = document.querySelector('.game-field');\nconst $09e991522ca7e64e$var$winMessage = document.querySelector('.message-win');\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$startMessage = document.querySelector('.message-start');\nfunction $09e991522ca7e64e$var$updateCell(r, c, value) {\n    const cell = $09e991522ca7e64e$var$gameField.rows[r].cells[c];\n    cell.className = 'field-cell';\n    if (value) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n    } else cell.textContent = '';\n}\nfunction $09e991522ca7e64e$var$updateUI() {\n    $09e991522ca7e64e$var$scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n    const board = $09e991522ca7e64e$var$game.getState();\n    board.forEach((row, r)=>row.forEach((value, c)=>$09e991522ca7e64e$var$updateCell(r, c, value)));\n    $09e991522ca7e64e$var$winMessage.classList.toggle('hidden', $09e991522ca7e64e$var$game.getStatus() !== 'win');\n    $09e991522ca7e64e$var$loseMessage.classList.toggle('hidden', $09e991522ca7e64e$var$game.getStatus() !== 'lose');\n}\nfunction $09e991522ca7e64e$var$handleMove(eventKey) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== 'playing') return;\n    const moveMap = {\n        ArrowLeft: ()=>$09e991522ca7e64e$var$game.moveLeft(),\n        ArrowRight: ()=>$09e991522ca7e64e$var$game.moveRight(),\n        ArrowUp: ()=>$09e991522ca7e64e$var$game.moveUp(),\n        ArrowDown: ()=>$09e991522ca7e64e$var$game.moveDown()\n    };\n    const moveMade = moveMap[eventKey] && moveMap[eventKey]();\n    if (moveMade) $09e991522ca7e64e$var$updateUI();\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle' || $09e991522ca7e64e$var$game.getStatus() === 'lose' || $09e991522ca7e64e$var$game.getStatus() === 'win') {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startMessage.classList.add('hidden');\n        $09e991522ca7e64e$var$startButton.textContent = 'Restart';\n        $09e991522ca7e64e$var$startButton.classList.add('restart');\n    } else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateUI();\n}\ndocument.addEventListener('keydown', (e)=>$09e991522ca7e64e$var$handleMove(e.key));\n$09e991522ca7e64e$var$startButton.addEventListener('click', $09e991522ca7e64e$var$startGame);\n$09e991522ca7e64e$var$updateUI();\n\n\n//# sourceMappingURL=Game-2048.c2fe2c8b.js.map\n","'use strict';\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.button.start');\nconst scoreDisplay = document.querySelector('.game-score');\nconst gameField = document.querySelector('.game-field');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\n\nfunction updateCell(r, c, value) {\n  const cell = gameField.rows[r].cells[c];\n\n  cell.className = 'field-cell';\n\n  if (value) {\n    cell.classList.add(`field-cell--${value}`);\n    cell.textContent = value;\n  } else {\n    cell.textContent = '';\n  }\n}\n\nfunction updateUI() {\n  scoreDisplay.textContent = game.getScore();\n\n  const board = game.getState();\n\n  board.forEach((row, r) => row.forEach((value, c) => updateCell(r, c, value)));\n\n  winMessage.classList.toggle('hidden', game.getStatus() !== 'win');\n  loseMessage.classList.toggle('hidden', game.getStatus() !== 'lose');\n}\n\nfunction handleMove(eventKey) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const moveMap = {\n    ArrowLeft: () => game.moveLeft(),\n    ArrowRight: () => game.moveRight(),\n    ArrowUp: () => game.moveUp(),\n    ArrowDown: () => game.moveDown(),\n  };\n\n  const moveMade = moveMap[eventKey] && moveMap[eventKey]();\n\n  if (moveMade) {\n    updateUI();\n  }\n}\n\nfunction startGame() {\n  if (\n    game.getStatus() === 'idle' ||\n    game.getStatus() === 'lose' ||\n    game.getStatus() === 'win'\n  ) {\n    game.start();\n    startMessage.classList.add('hidden');\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n  } else {\n    game.restart();\n  }\n\n  updateUI();\n}\n\ndocument.addEventListener('keydown', (e) => handleMove(e.key));\nstartButton.addEventListener('click', startGame);\n\nupdateUI();\n","class Game {\n  constructor() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addNewTile();\n    this.addNewTile();\n  }\n\n  restart() {\n    this.start();\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  addNewTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length) {\n      const { r, c } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  getEmptyCells() {\n    return this.board\n      .flatMap((row, r) => row.map((cell, c) => (cell === 0 ? { r, c } : null)))\n      .filter(Boolean);\n  }\n\n  moveLeft() {\n    return this.shiftTiles((row) => this.mergeRow(row));\n  }\n\n  moveRight() {\n    return this.shiftTiles((row) => {\n      const mergedRow = this.mergeRow(row.slice().reverse());\n\n      return mergedRow.reverse();\n    });\n  }\n\n  moveUp() {\n    this.transposeBoard();\n\n    const moved = this.moveLeft();\n\n    this.transposeBoard();\n\n    return moved;\n  }\n\n  moveDown() {\n    this.transposeBoard();\n\n    const moved = this.moveRight();\n\n    this.transposeBoard();\n\n    return moved;\n  }\n\n  shiftTiles(transform) {\n    let moved = false;\n    const newBoard = this.board.map((row) => {\n      const newRow = transform(row);\n\n      if (JSON.stringify(row) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n\n      return newRow;\n    });\n\n    if (moved) {\n      this.board = newBoard;\n      this.addNewTile();\n      this.checkGameOver();\n    }\n\n    return moved;\n  }\n\n  mergeRow(row) {\n    const filtered = row.filter((val) => val !== 0);\n    const merged = [];\n\n    for (let i = 0; i < filtered.length; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        merged.push(filtered[i] * 2);\n        this.score += filtered[i] * 2;\n        i++;\n      } else {\n        merged.push(filtered[i]);\n      }\n    }\n\n    while (merged.length < 4) {\n      merged.push(0);\n    }\n\n    return merged;\n  }\n\n  /* eslint-disable function-paren-newline */\n  transposeBoard() {\n    this.board = this.board[0].map((_, colIndex) =>\n      this.board.map((row) => row[colIndex]),\n    );\n  }\n  /* eslint-enable function-paren-newline */\n\n  checkGameOver() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    } else if (this.getEmptyCells().length === 0 && !this.canMerge()) {\n      this.status = 'lose';\n    }\n  }\n\n  /* eslint-disable function-paren-newline */\n  canMerge() {\n    return this.board.some((row, r) =>\n      row.some(\n        (val, c) =>\n          val !== 0 &&\n          ((c < 3 && val === row[c + 1]) ||\n            (r < 3 && val === this.board[r + 1][c])),\n      ),\n    );\n  }\n}\n/* eslint-enable function-paren-newline */\n\nexport default Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","board","createEmptyBoard","score","status","getState","getScore","getStatus","start","addNewTile","restart","Array","from","length","fill","emptyCells","getEmptyCells","r","c","Math","floor","random","flatMap","row","map","cell","filter","Boolean","moveLeft","shiftTiles","mergeRow","moveRight","mergedRow","slice","reverse","moveUp","transposeBoard","moved","moveDown","transform","newBoard","newRow","JSON","stringify","checkGameOver","filtered","val","merged","i","push","_","colIndex","some","includes","canMerge","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$scoreDisplay","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$updateUI","textContent","forEach","value","$09e991522ca7e64e$var$updateCell","rows","cells","className","classList","add","toggle","addEventListener","e","$09e991522ca7e64e$var$handleMove","eventKey","moveMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","moveMade","key"],"version":3,"file":"Game-2048.c2fe2c8b.js.map"}